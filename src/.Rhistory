names(medium_ranks) <- rownames(counts)
medium_counts = rep(0,length(rownames(counts)))
names(medium_counts) <- rownames(counts)
easy_ranks = rep(0,length(rownames(counts)))
names(easy_ranks) <- rownames(counts)
easy_counts = rep(0,length(rownames(counts)))
names(easy_counts) <- rownames(counts)
set.seed(1234)
pb = txtProgressBar(0,n_iters,style = 3)
samples = as.vector(sample(colnames(counts),
size = round(0.75*N),
replace = FALSE))
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
sample_counts
sample_data[,1] <- NULL
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
sample_counts
rownames(sample_data) <- sample_data[,1]
sample_data[,1] <- NULL
sample_data
dds <- DESeqDataSetFromMatrix(countData = sample_counts,
colData = sample_data,
design = ~ Response)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 5) >= smallestGroupSize
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds,quiet = TRUE)
dds
res <- results(dds)
res
res <- res[!is.na(res$padj),]
res
strict_res <- res[res$padj < strict_thresh,]
strict_res
medium_res <- res[res$padj < medium_thresh,]
medium_res
dim(counts)
easy_res <- res[res$padj < easy_thresh,]
easy_res
col_data
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1)
names(fdr_thresholds) <- c("very tight", "tight",
"medium", "loose", "very loose")
for (t in fdr_thresholds){
print(t)
}
res <- results(dds)
res <- res[!is.na(res$padj),]
for (thresh in fdr_thresholds){
temp <- res[res$padj <= thresh,]
print(temp)
}
for (thresh in fdr_thresholds){
temp <- res[res$padj <= thresh,]
print(thresh)
print(dim(temp))
}
for (thresh.name in names(fdr_thresholds)){
print(thresh.name)
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
}
count_vectors <- list()
count_vectors$a <- c(0,1,2)
count_vectors
count_vectors <- list()
count_vectors$a <- c(0,1,2)
count_vectors
for (p in c("a","b")){
print(count_vectors$p)
}
names(count_vectors)
for (p in c("a","b")){
print(count_vectors[p])
}
dim(counts)[1]
counts.head()
head(counts)
counts[1:3,1:3]
rownames(counts[1:3,1:3])
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1)
count_vectors = list()
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose")
for (name in names(fdr_thresholds)){
count_vectors[name] <- rep(0,dim(counts)[1])
names(count_vectors[name]) <- rownames(counts)
}
dim(counts)[1]
for(name in names(fdr_thresholds)){
count_vectors[name] <- rep(0,dim(counts)[1])
print(count_vectors[name])
#names(count_vectors[name]) <- rownames(counts)
}
for(name in names(fdr_thresholds)){
count_vectors[name] <- rep(0,times = dim(counts)[1])
print(count_vectors[name])
#names(count_vectors[name]) <- rownames(counts)
}
for(name in names(fdr_thresholds)){
count_vectors[name] <- rep(0,10)
print(count_vectors[name])
#names(count_vectors[name]) <- rownames(counts)
}
counts = counts[1:20,]
col_data = read.csv("./col_data.csv")
col_data
col_data$Response <- factor(col_data$Binned_Response)
N = length(colnames(counts))
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1)
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose")
count_table <- rep(0,length(fdr_thresholds),nrow(counts))
dim(count_table)
count_table
count_table <- rep(0,n= length(fdr_thresholds),m= nrow(counts))
count_table
count_table <- matrix(0,n= length(fdr_thresholds),m= nrow(counts))
matrix(0,2,3)
count_table <- matrix(0,length(fdr_thresholds),nrow(counts))
count_table
dim(count_table)
count_table <- matrix(0,nrow(counts),length(fdr_thresholds))
count_table
rownames(count_table) <- rownames(counts)
count_table
colnames(count_table) <- names(fdr_thresholds)
rownames(count_table) <- rownames(counts)
count_table
print(thresh.name)
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
res <- results(dds)
res <- res[!is.na(res$padj),]
print(thresh.name)
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
fdr_thresholds[thresh.name]
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1)
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose")
count_table <- matrix(0,nrow(counts),length(fdr_thresholds))
colnames(count_table) <- names(fdr_thresholds)
rownames(count_table) <- rownames(counts)
print(thresh.name)
fdr_thresholds[thresh.name]
print(thresh.name)
thresh.val <- fdr_thresholds[which(names(fdr_thresholds)==thresh.name)]
thres.val
thresh.val
fdr_thresholds[which(names(fdr_thresholds)==thresh.name)]
fdr_thresholds
fdr_thresholds['very.tight']
fdr_thresholds[thresh.name]
thresh.name
for (thresh.name in names(fdr_thresholds)){
thresh.name
fdr_thresholds['very.tight']
fdr_thresholds[thresh.name]
[which(names(fdr_thresholds)==thresh.name)]
thresh.name
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1)
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose")
for (thresh.name in names(fdr_thresholds)){
thresh.name
print(thresh.name)
}
for (thresh.name in names(fdr_thresholds)){
thresh.name
print(fdr_thresholds[thresh.name])
}
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(temp)
}
counts = as.matrix(read.csv("./count_data.csv",row.names = 'Gene_ID',check.names=FALSE))
counts = round(counts)
dim(counts)
mode(counts) <- "integer"
col_data = read.csv("./col_data.csv")
col_data$Response <- factor(col_data$Binned_Response)
cold_data
col_data
col_data <- col_data['Response']
col_data
col_data = read.csv("./col_data.csv")
col_data$Response <- factor(col_data$Binned_Response)
col_data
samples = as.vector(sample(colnames(counts),
size = round(0.75*N),
replace = FALSE))
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
rownames(sample_data) <- sample_data[,1]
sample_data[,1] <- NULL
dds <- DESeqDataSetFromMatrix(countData = sample_counts,
colData = sample_data,
design = ~ Response)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 5) >= smallestGroupSize
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds,quiet = TRUE)
thresh.name
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(temp)
}
stop()
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(temp)
stop()
}
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1,0.15)
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose","lax")
count_table <- matrix(0,nrow(counts),length(fdr_thresholds))
colnames(count_table) <- names(fdr_thresholds)
rownames(count_table) <- rownames(counts)
set.seed(1234)
samples = as.vector(sample(colnames(counts),
size = round(0.75*N),
replace = FALSE))
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
rownames(sample_data) <- sample_data[,1]
sample_data[,1] <- NULL
dds <- DESeqDataSetFromMatrix(countData = sample_counts,
colData = sample_data,
design = ~ Response)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 5) >= smallestGroupSize
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds,quiet = TRUE)
res <- results(dds)
res <- res[!is.na(res$padj),]
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(rownames(temp))
stop()
}
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(rownames(temp))
for (gene in rownames(temp)){
print(count_table[gene,thresh.name])
}
stop()
}
print(thresh.name)
counts = as.matrix(read.csv("./count_data.csv",row.names = 'Gene_ID',check.names=FALSE))
counts = round(counts)
dim(counts)
mode(counts) <- "integer"
col_data = read.csv("./col_data.csv")
col_data$Response <- factor(col_data$Binned_Response)
col_data
N = length(colnames(counts))
fdr_thresholds <- c(0.005, 0.01, 0.02, 0.05, 0.1,0.15)
names(fdr_thresholds) <- c("very.tight", "tight",
"medium", "loose", "very.loose","lax")
count_table <- matrix(0,nrow(counts),length(fdr_thresholds))
colnames(count_table) <- names(fdr_thresholds)
rownames(count_table) <- rownames(counts)
for(i in seq(n_iters)){
setTxtProgressBar(pb,i)
samples = as.vector(sample(colnames(counts),
size = round(0.75*N),
replace = FALSE))
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
rownames(sample_data) <- sample_data[,1]
sample_data[,1] <- NULL
dds <- DESeqDataSetFromMatrix(countData = sample_counts,
colData = sample_data,
design = ~ Response)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 5) >= smallestGroupSize
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds,quiet = TRUE)
res <- results(dds)
res <- res[!is.na(res$padj),]
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(rownames(temp))
print(thresh.name)
for (gene in rownames(temp)){
count_table[gene,thresh.name] <-  count_table[gene,thresh.name]+1
}
}
}
n_iters <- 5
for(i in seq(n_iters)){
setTxtProgressBar(pb,i)
samples = as.vector(sample(colnames(counts),
size = round(0.75*N),
replace = FALSE))
sample_data = col_data[match(samples,col_data$Run_ID),]
sample_counts = counts[,samples]
rownames(sample_data) <- sample_data[,1]
sample_data[,1] <- NULL
dds <- DESeqDataSetFromMatrix(countData = sample_counts,
colData = sample_data,
design = ~ Response)
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 5) >= smallestGroupSize
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds,quiet = TRUE)
res <- results(dds)
res <- res[!is.na(res$padj),]
for (thresh.name in names(fdr_thresholds)){
thresh.name
temp <- res[res$padj <= fdr_thresholds[thresh.name],]
print(rownames(temp))
print(thresh.name)
for (gene in rownames(temp)){
count_table[gene,thresh.name] <-  count_table[gene,thresh.name]+1
}
}
}
print(count_table[1:10,1:5])
print(rowsum(count_table))
print(rowsums(count_table))
rowSums(count_table)
rowSums(count_table)[rowSums(count_table)>0]
sort(rowSums(count_table)[rowSums(count_table)>0])
length(sort(rowSums(count_table)[rowSums(count_table)>0]))
count_table[,'very.loose']
loose_counts = count_table[,'very.loose']
loose_counts = loose_counts[loose_counts>0]
loose_counts
loose_counts = count_table[,'very.loose']
loose_counts = loose_counts[loose_counts>0]
loose_counts
df = data.frame(Gene = rownames(loose_counts),
Count = loose_counts,
Cutoff = rep('very.loose',length(loose_counts)))
loose_counts = count_table[,'very.loose']
loose_counts = loose_counts[loose_counts>0]
df = data.frame(Gene = rownames(loose_counts),
Count = loose_counts,
Cutoff = rep('very.loose',length(loose_counts)))
length(rownames(loose_counts))
df = data.frame(Gene = names(loose_counts),
Count = loose_counts,
Cutoff = rep('very.loose',length(loose_counts)))
df
loose_counts = count_table[,'very.loose']
loose_counts = loose_counts[loose_counts>0]
df = data.frame(Gene = names(loose_counts),
Count = loose_counts,
Cutoff = rep('very.loose',length(loose_counts)))
rownames(df) <- NULL
df
res = data.frame()
res
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
df
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
res = rbind(res,df)
}
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
rownames(df) <- NULL
res = rbind(res,df)
}
df
df.tail()
tail9df
tail(df)
res = data.frame()
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
rownames(df) <- NULL
res = rbind(res,df)
}
tail(df)
table(df$Thresh.Name)
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
rownames(df) <- NULL
res = cbind(res,df)
}
res = data.frame()
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
rownames(df) <- NULL
res = cbind(res,df)
}
res = rbind(res,df)
df
dim(df)
res = data.frame()
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name]))
rownames(df) <- NULL
res = rbind(res,df)
}
dim(df)
table(df$Thresh.Name)
res = data.frame()
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name],length(count_vec)))
rownames(df) <- NULL
res = rbind(res,df)
}
dim(df)
table(df$Thresh.Name)
res = data.frame()
print(res)
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name],length(count_vec)))
rownames(df) <- NULL
res = rbind(res,df)
print(res)
stop()
}
res = data.frame()
print(res)
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name],length(count_vec)))
rownames(df) <- NULL
res = rbind(res,df)
print(res)
if(thresh.name == 'tight'){
stop()
}
}
table(res$Thresh.Name)
res = data.frame()
print(res)
for(thresh.name in names(fdr_thresholds)){
count_vec <- count_table[,thresh.name]
count_vec <- count_vec[count_vec>0]
df = data.frame(Gene = names(count_vec),
Count = count_vec,
Thresh.Name = rep(thresh.name,length(count_vec)),
Thresh.Value = rep(fdr_thresholds[thresh.name],length(count_vec)))
rownames(df) <- NULL
res = rbind(res,df)
print(res)
}
table(res$Thresh.Name)
print(res)
c("../data/processed/genesets/",drug,"_",tissue,"_DE.csv")
paste0("../data/processed/genesets/",drug,"_",tissue,"_DE.csv")
